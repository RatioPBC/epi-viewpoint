#!/usr/bin/env bash

source "bin/_support/cecho.sh"
source "bin/_support/check.sh"
source "bin/_support/step.sh"
source "bin/_support/os.sh"

testcomm() {
  result=$(comm -13 /tmp/.envrc-keys /tmp/.envrc-keys.sample)
  echo "$result"

  test -z "$result"
}

# run doctor in home directory if present
if [[ -f "${HOME}/bin/dev/doctor" ]]; then
  if step "Found a doctor script in home directory; running..." "pushd ${HOME} > /dev/null && ./bin/dev/doctor && popd > /dev/null"; then
    step_header "Running project doctor steps"
  else
    exit 1
  fi
fi

check "git-duet: installed" \
  "command -v git-duet" \
  "open https://github.com/git-duet/git-duet#installation"

if hash brew 2>/dev/null; then
  check "homebrew: up to date" \
    "brew bundle check" \
    "brew bundle"
else
  cecho --yellow "[checking] brew: Skipping brew check - not installed."
fi

check "direnv: installed" \
  "command -v direnv" \
  "brew install direnv && echo 'eval \"$(direnv hook bash)\"' >> ~/.bash_profile"

check "direnv: .envrc file exists" \
  "head .envrc" \
  "cp .envrc.sample .envrc"

check "direnv: .envrc file has all keys" \
  "sed -E 's/=.+//' .envrc.sample >/tmp/.envrc-keys.sample && sed -E 's/=.+//' .envrc >/tmp/.envrc-keys && testcomm" \
  "# copy required keys from .envrc.sample to .envrc and don't forget to run 'direnv allow', also make sure your keys are alphabetical"

check "direnv: loaded RC path" \
  "direnv status | grep -s 'Loaded RC path'" \
  "open https://direnv.net/docs/hook.html"

check "asdf: installed" \
  "command -v asdf" \
  "git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.7.8 && echo -e '\n. $HOME/.asdf/asdf.sh' >> ~/.bash_profile && echo -e '\n. $HOME/.asdf/completions/asdf.bash' >> ~/.bash_profile && asdf update"

EUCLID_PATH="${EUCLID_PATH:-../euclid}"
check "repo: euclid is installed locally" \
  "ls $EUCLID_PATH" \
  "git clone git@github.com:geometerio/euclid.git $EUCLID_PATH # you can define \$EUCLID_PATH to be somewhere else if you like"

check "asdf: erlang plugin installed" \
  "asdf plugin-list | grep erlang" \
  "asdf plugin-add erlang"

check "asdf: elixir plugin installed" \
  "asdf plugin-list | grep elixir" \
  "asdf plugin-add elixir"

check "gpg: installed" \
  "command -v gpg" \
  "# install gpg via package manager"

check "asdf: nodejs plugin installed" \
  "asdf plugin-list | grep nodejs" \
  "asdf plugin-add nodejs && bash ~/.asdf/plugins/nodejs/bin/import-release-team-keyring"

check "asdf: postgres plugin installed" \
  "asdf plugin-list | grep postgres" \
  "asdf plugin-add postgres"

check "asdf: tools are installed" \
  "asdf which erl > /dev/null && asdf which elixir > /dev/null && asdf which node > /dev/null && asdf which postgres > /dev/null" \
  "asdf install"

check "elixir: hex installed" \
  "mix local.hex --if-missing --force" \
  "mix local.hex --force"

check "elixir: rebar3 installed" \
  "mix local.rebar --if-missing --force" \
  "mix local.rebar --force"

check "elixir: deps installed" \
  "test $(mix deps | grep -c 'the dependency is not available') -eq 0" \
  "mix deps.get"

check "npm: packages installed" \
  "npm list --prefix assets --dev" \
  "npm install --prefix assets"

check "yq: correct version is installed" \
  "yq --version 2>&1 | grep -q 'yq version 3'" \
  "brew upgrade yq # you may need to uninstall python-yq"

check "postgres: running" \
  "psql -l" \
  "bin/dev/postgres-start"

check "postgres: correct version is running" \
  "test $(asdf current postgres | grep -E -o "\d+\.\d+") = $($(asdf which postgres) --version | cut -f 3 -d ' ')" \
  "bin/dev/postgres-restart"

check "postgres: role exists" \
  "psql -A -c '\du' postgres | grep 'postgres|'" \
  "createuser -s postgres -U \$USER"

check "postgres: dev database exists" \
  "psql -c '\l' epicenter_dev" \
  "mix ecto.setup # or if you have per-project postgres versions, perhaps: bin/dev/postgres-restart"
